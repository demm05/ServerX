#pragma once

#include "ConfigNode.hpp"
#include "ServerBlock.hpp"

namespace config {

/**
 * @class ConfigBuilder
 * @brief Constructs the final, strongly-typed configuration from a generic parse tree.
 *
 * This class takes the Intermediate Representation (IR) generated by the Parser,
 * validates the semantics of the directives (e.g., checks for valid port numbers),
 * and populates the final ServerConfig and LocationBlock objects. It bridges the
 * gap between syntax and a usable configuration.
 */
class ConfigBuilder {
public:
    static ServerBlockVec build(ConfigNodeVec const &);

private:
    ServerBlockVec servers_;

    typedef void (ConfigBuilder::*ServerDirectiveHandler)(ServerBlock &, const DirectiveArgs &);
    typedef std::map<std::string, ServerDirectiveHandler> ServerHandlerMap;
    typedef void (ConfigBuilder::*LocationDirectiveHandler)(LocationBlock &, const DirectiveArgs &);
    typedef std::map<std::string, LocationDirectiveHandler> LocationHandlerMap;

    const ServerHandlerMap &getServerDirectiveHandlers();
    const LocationHandlerMap &getLocationDirectiveHandlers();

    void buildServer(ConfigNode const &server_node);
    void buildServerDirectives(ServerBlock &, DirectiveMap const &);
    void buildServerChildren(ServerBlock &, ConfigNodeVec const &);
    void buildLocation(ServerBlock &, ConfigNode const &);

    void handleListen(ServerBlock &, DirectiveArgs const &);
    void handleServerName(ServerBlock &, DirectiveArgs const &);
    void handleRoot(LocationBlock &, DirectiveArgs const &);
    void handleIndex(LocationBlock &, DirectiveArgs const &);
};

} // namespace config
